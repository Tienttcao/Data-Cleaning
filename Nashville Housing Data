USE [Project2_Data_Cleaning];
SELECT * FROM [dbo].[NashvilleHousing] 

--check if there is NULL address

SELECT * FROM NashvilleHousing
WHERE PropertyAddress IS NULL;

-- research on property address values ordered by Parcel ID in ascending order

SELECT * FROM NashvilleHousing
ORDER BY ParcelID;

-- The result of the query above shows that there are several duplicate values in Parcel ID and Property Address
-- Since Parcel ID and Property ID data are referencing one another, this query uses SELF JOIN to identify Property Address using Parcel ID

SELECT a.ParcelID,a.PropertyAddress,b.ParcelID,b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress) as UpDatedAddress
FROM NashvilleHousing as a
JOIN NashvilleHousing as b 
     ON a.ParcelID = b.ParcelID
     AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL;


-- Update Property Address where there is NULL 
UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM [dbo].[NashvilleHousing] as a
JOIN [dbo].[NashvilleHousing] as b 
    ON a.ParcelID = b.ParcelID
    AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL;

--Breaking out Address into Individual Columns (Address, City, State)

SELECT SUBSTRING(PropertyAddress,1,CHARINDEX(',',PropertyAddress)-1) As Address,
       SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress)+1,LEN(PropertyAddress)) as City
FROM [dbo].[NashvilleHousing]

ALTER TABLE NashvilleHousing
ADD PropertySplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress,1,CHARINDEX(',',PropertyAddress)-1)

ALTER TABLE NashvilleHousing
ADD PropertySplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress)+1,LEN(PropertyAddress)) 

SELECT * FROM NashvilleHousing;

-- Seperating OwnerAddress using PARSENAME
SELECT PARSENAME(REPLACE(OwnerAddress,',','.'),3),
       PARSENAME(REPLACE(OwnerAddress,',','.'),2),
       PARSENAME(REPLACE(OwnerAddress,',','.'),1)
FROM NashvilleHousing;

ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress,',','.'),3);

ALTER TABLE NashvilleHousing
ADD OwnerSplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress,',','.'),2);

ALTER TABLE NashvilleHousing
ADD OwnerSplitState NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress,',','.'),1);

SELECT * FROM NashvilleHousing;

-- Change Y and N to Yes and No in 'Sold as Vacant' Field

SELECT Distinct(SoldAsVacant),Count(SoldAsVacant)
FROM NashvilleHousing
GROUP BY SoldAsVacant
ORDER BY SoldAsVacant

UPDATE NashvilleHousing
SET SoldAsVacant = 'Yes' 
WHERE SoldAsVacant = 'Y';

UPDATE NashvilleHousing
SET SoldAsVacant = 'No'
WHERE SoldAsVacant = 'N';

SELECT SoldAsVacant
FROM NashvilleHousing


-- Remove Duplicates
-- Use Row Number to identify duplicate values, grouped by unique values include ParcelID, SaleDate, SalePrice, and LegalReference
WITH RowNumCTE AS 
(
SELECT * ,
       ROW_NUMBER() OVER (PARTITION BY ParcelID,
                                        PropertyAddress,
                                       SaleDate,
                                       SalePrice,
                                       LegalReference
                          ORDER BY UniqueID
                          ) as row_num
FROM NashvilleHousing)


DELETE FROM RowNumCTE
WHERE Row_num > 1
--ORDER BY PropertyAddress

--SELECT * FROM RowNumCTE
--WHERE Row_num >1

--Delete Unused Columns

SELECT * FROM NashvilleHousing;

ALTER TABLE [dbo].[NashvilleHousing]
DROP COLUMN PropertyAddress, OwnerAddress
